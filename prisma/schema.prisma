// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  rooms     Room[]   @relation("RoomCreator")
  votes     Vote[]   @relation("UserVotes")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id          String   @id @default(uuid())
  uniqueId    String   @unique @default(uuid())
  title       String
  description String
  deadline    DateTime
  creatorId   String
  creator     User     @relation("RoomCreator", fields: [creatorId], references: [id])
  options     Option[]
  votes       Vote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Option {
  id        String   @id @default(uuid())
  text      String
  voteCount Int      @default(0)
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(uuid())
  roomId    String
  optionId  String
  userId    String? // Optional for guests
  guestsId  String? // For guests
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User?    @relation("UserVotes", fields: [userId], references: [id])
}
